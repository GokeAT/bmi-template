piepline {
    agent any
    environment {
            DATABASE_URI= credentials("DATABASE_URI")
            SECRET_KEY = credentials("SECRET_KEY")
            DOCKER_LOGIN = credentials("DOCKER_LOGIN")
            rebuild_db = 'true'
            install_docker = 'false'
    }
    stages {
        stage('Test'){
            steps{
                sh 'bash jenkins/test.sh'
            }  
        }
    stages('Setup Docker'){
        steps {
            script{
                if (env.install_docker == 'true'){
                    sh 'bash jenkins/setup-docker.sh'
                    }
                } 
        }
    }
    }
    stages {
        stage('Build'){
            steps {
                sh 'docker build -t gokeat/bmi-template:latest .' 
            }  
        }
    }
    stages {
        stage('Push'){
            steps{
                sh 'docker push gokeat/bmi-template:latest' 
            } 
        }
    }
    stages {
        stage('Config'){
            steps {
                sh 'ansible-playbook -i inventory playbook.yaml' 
            }   
        }
    }
    stages {
        stage('Run'){
            steps{
                sh 'docker rm -f bmi-template'
                sh 'docker run -d -p 80:5000 -e DATABASE_URI=$DATABASE_URI -e SECRET_KEY=$SECRET_KEY --name -bmi-template gokeat/bmi-template '
                script{
                        if (env.rebuild_db == 'true'){
                            sh 'docker exec bmi-template python create.py'
                        }
                    } 
            }  
        }
    }
    post {
        always{
            junit '**/*.xml'
            cobertura coberturaReportFile: 'coverage.xml', failNoReports: false
        }

    }
}
